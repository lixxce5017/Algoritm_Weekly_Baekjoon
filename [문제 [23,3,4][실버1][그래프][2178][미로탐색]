#include <iostream>
#include <queue>
using namespace std;

int dx[] = { 0, 1, 0, -1 };
int dy[] = { 1, 0, -1, 0 };
int arr[101][101];
bool visited[101][101] = { false };
int N, M;

void BFS(int i, int j) {
    queue<pair<int, int>> myqueue;
    myqueue.push(make_pair(i, j));
    while (!myqueue.empty()) {
     
        int a = myqueue.front().first;
        int b = myqueue.front().second;
        myqueue.pop();
        visited[i][j] = true;
        for (int k = 0; k < 4; k++) {
            int nextx = a + dx[k];
            int nexty = b + dy[k];
            if (nextx >= 0 && nexty >= 0 && nextx < N && nexty < M) {
                if (arr[nextx][nexty] != 0 && !visited[nextx][nexty]) {
                    visited[nextx][nexty] = true;
                    arr[nextx][nexty] = arr[a][b] + 1;
                    myqueue.push(make_pair(nextx, nexty));
                }
            }
        }
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> N >> M;

    for (int i = 0; i < N; i++) {
        string s;
        cin >> s;
        for (int j = 0; j < M; j++) {
            arr[i][j] = s[j] - '0';
        }
    }

    BFS(0, 0);
    cout << arr[N - 1][M - 1] << "\n";
}


