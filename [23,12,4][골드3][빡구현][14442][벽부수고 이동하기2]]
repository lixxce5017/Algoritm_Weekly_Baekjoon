#include <iostream>
#include <string>
#include<math.h>
#include<vector>
#include<queue>
#include <climits>
#include<algorithm>
#include<climits>
#include<tuple>
using namespace std;
int n, m, k;
typedef tuple<int, int, int>mytu;
int dirtion[4][2] = { {0,1},{1,0},{-1,0},{0,-1} };
int arr[1003][1003];
int visitied[1003][1003][10];
int dfs()
{
	queue<mytu>myq;
	myq.push(mytu(1, 1, 0));
	visitied[1][1][0] = 1;
	while (!myq.empty())
	{
		mytu now = myq.front();
		int noX = get<0>(now);
		int noY = get<1>(now);
		int count = get<2>(now);
		myq.pop();
		if (noX == n && noY == m) { 
			return visitied[n][m][count]; }
		for (int i = 0; i < 4; i++)
		{
			int NowX = noX + dirtion[i][0];
			int NowY = noY + dirtion[i][1];

			if (NowX > 0 && NowY > 0 && NowX <= n && NowY <= m && arr[NowX][NowY] == 0)
			{

				//안 부시고 쭉 0만 가는 경우
				if (visitied[NowX][NowY][0] == 0 && count == 0)
				{
					visitied[NowX][NowY][0] = visitied[noX][noY][0] + 1;
					myq.push(mytu(NowX, NowY, count));
				}
				//부신 후 다시 0으로 가는 경우
				if (visitied[NowX][NowY][count] == 0)
				{
					if (count >= 1 || count < k)
					{
						visitied[NowX][NowY][count] = visitied[noX][noY][count] + 1;
						myq.push(mytu(NowX, NowY, count));
					}
				}
			}
			//부시고 가는 경우 k번 이전까지 부술 수 있음 되는 대로 그리디하게 부숨
			if (NowX > 0 && NowY > 0 && NowX <= n && NowY <= m && arr[NowX][NowY] == 1)
			{
				if (visitied[NowX][NowY][1] == 0 && count == 0)
				{
					visitied[NowX][NowY][1] = visitied[noX][noY][0] + 1;

					myq.push(mytu(NowX, NowY, count + 1));
				}
				//여기 고쳤음
				else if (visitied[NowX][NowY][count+1] == 0 && (count >= 1 && count < k))
				{
					visitied[NowX][NowY][count+1] = visitied[noX][noY][count] + 1;
					myq.push(mytu(NowX, NowY, count + 1));
				}

			}
		}
	}

	return 0;
}
int main() {
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < m; j++)
		{
			arr[i][j + 1] = s[j] - '0';
		}
	}
	int ans=dfs();
	if (ans == 0)
		cout << -1;
	else
	{
		cout << ans;
	}


}
