#include<iostream>
#include<algorithm>
#include<string>
#include<vector>
#include<cmath>
#include<sstream>
#include<tuple>
#include<queue>
using namespace std;
static vector<int>Arr[10003];
bool visitied[10003];
int answer[10003];



void BFS(int node);
void revisitied(int num);

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		Arr[a].push_back(b);
	}
	for (int i = 0; i <= n; i++)
	{
		revisitied(n);
		BFS(i);
	}
	int maxx =0;
	for (int i = 1; i <= n; i++)
	{
		if (answer[i] > maxx)
		{
			maxx = answer[i];
		}
	}
	for (int i = 1; i <= n; i++)
	{
		if (answer[i] == maxx)
		{
			cout << i << " ";
		}
	}

}
void revisitied(int num)
{
	for (int i = 0; i <= num; i++)
	{
		visitied[i] = false;
	}
}
void BFS(int node)
{
	queue<int>qq;
	qq.push(node);
	visitied[node] = true;
	while (!qq.empty())
	{
		int now = qq.front();
		qq.pop();
		for (int i : Arr[now])
		{
			if (visitied[i] == false)
			{
				visitied[i] =true;
				answer[i]++;
				qq.push(i);
			}
		}
	}

}
