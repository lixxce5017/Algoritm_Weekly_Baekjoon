#include<iostream>
#include<algorithm>
#include<string>
#include<vector>
#include<cmath>
#include<sstream>
#include<tuple>
#include<queue>
using namespace std;
static vector<vector<int>> Arr;
static vector<int> visitied;
static vector<int>answer;

//단방향 그래프, 모든 거리는 1(가중치),k에서부터의 최단 거리 도시들을 출력
//x에서 출발해서 k거리 만큼 가는 노드를 출력;
void BFS(int node);

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int n, m, k, x;
	cin >> n >> m >> k >> x;
	Arr.resize(n + 1);
	visitied.resize(n + 1, -1);
	
	for (int i = 0; i <m; i++)
	{
		int a, b;
		cin >> a >> b;
		Arr[a].push_back(b);
	}
	BFS(x);

	for (int i = 1; i <= n; i++)
	{
		if (visitied[i] == k)
		{
			answer.push_back(i);
		}
	}
	if (answer.empty())
	{
		cout << "-1" << "\n";
	}
	else
	{
		for (int i:answer)
		{
			cout << i << "\n";
		}
	}
	
}


void BFS(int node)
{
	queue<int>myque;
	myque.push(node);
	visitied[node] = 0;
	while (!myque.empty())
	{
		int now = myque.front();
		myque.pop();
		for (int temp : Arr[now])
		{
			if (visitied[temp] == -1)
			{
				visitied[temp] = visitied[now] + 1;
				myque.push(temp);
			}
		}

	}


	
	

	
}
                                                            
