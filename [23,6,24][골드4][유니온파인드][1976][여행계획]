#include <iostream>
#include <algorithm>
#include <vector>
#include<stdio.h>
using namespace std;
static vector<int>parent;
int find(int a);

void unionfunc(int a, int b);
int main(void)
{

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m;
    cin >> n >> m;

    int dois[201][201];
    int route[1001];
    parent.resize(n + 1);
    for (int i = 1; i <=n; i++)
    {
        parent[i] = i;
    }
    for (int i = 1; i <=n; i++)
    {
        for (int j = 1; j <=n; j++)
        {
            cin >> dois[i][j];
            if (dois[i][j])
            {
                unionfunc(i, j);
            }
        }
    }
    for (int i = 1; i <= m; i++)
    {
        cin >> route[i];
    }

    int idx = find(route[1]);
    bool connet = true;
    

    for (int i = 2; i <= m; i ++ )
    {
        if (idx != find(route[i]))
        {
            cout << "NO" << "\n";
            connet = false;
            break;
        }
    }
    if (connet)
    {
        cout << "YES" << "\n";
    }
    return 0;
   
}

void unionfunc(int a, int b)
{
    a = find(a);
    b = find(b);

    if (a != b)
    {
        parent[b] = a;
    }

}

int find(int a)
{
    if (a == parent[a])
    {
        return a;
    }
    else
    {
        return parent[a] = find(parent[a]);
    }
}
