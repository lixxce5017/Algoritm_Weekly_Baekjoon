#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<queue>
using namespace std;

vector<vector<int>> arr;
vector<bool> visitied;
vector<int>d_distance;
bool flag;


void dfs(int idx, int depth)
{
	if (depth == 5)
	{
		flag = true;
		return;
	}
	visitied[idx] = true;
	for (auto i : arr[idx])
	{
		if (!visitied[i])
			dfs(i, depth + 1);
	}

	visitied[idx] = false;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	
	int n,m;
	cin >> n>>m;
	arr.resize(n);
	visitied = vector<bool>(n, false);
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		arr[a].push_back(b);
		arr[b].push_back(a);
	}
	for (int i = 0; i < n; i++)
	{

		dfs(i, 1);
		if (flag == true)
			break;
	}

	if (flag == true)
	{
		cout << 1;
	}
	
	else
	{
		cout << 0;
	}


}
